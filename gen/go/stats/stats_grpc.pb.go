// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stats/stats.proto

package statsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatService_GetAverageGrade_FullMethodName       = "/stats.StatService/GetAverageGrade"
	StatService_GetCardsReviewedCount_FullMethodName = "/stats.StatService/GetCardsReviewedCount"
	StatService_GetCardsLearnedCount_FullMethodName  = "/stats.StatService/GetCardsLearnedCount"
)

// StatServiceClient is the client API for StatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatServiceClient interface {
	GetAverageGrade(ctx context.Context, in *GetAverageGradeRequest, opts ...grpc.CallOption) (*GetAverageGradeResponse, error)
	GetCardsReviewedCount(ctx context.Context, in *GetCardsReviewedCountRequest, opts ...grpc.CallOption) (*GetCardsReviewedCountResponse, error)
	GetCardsLearnedCount(ctx context.Context, in *GetCardsLearnedCountRequest, opts ...grpc.CallOption) (*GetCardsLearnedCountResponse, error)
}

type statServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatServiceClient(cc grpc.ClientConnInterface) StatServiceClient {
	return &statServiceClient{cc}
}

func (c *statServiceClient) GetAverageGrade(ctx context.Context, in *GetAverageGradeRequest, opts ...grpc.CallOption) (*GetAverageGradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAverageGradeResponse)
	err := c.cc.Invoke(ctx, StatService_GetAverageGrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetCardsReviewedCount(ctx context.Context, in *GetCardsReviewedCountRequest, opts ...grpc.CallOption) (*GetCardsReviewedCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardsReviewedCountResponse)
	err := c.cc.Invoke(ctx, StatService_GetCardsReviewedCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statServiceClient) GetCardsLearnedCount(ctx context.Context, in *GetCardsLearnedCountRequest, opts ...grpc.CallOption) (*GetCardsLearnedCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCardsLearnedCountResponse)
	err := c.cc.Invoke(ctx, StatService_GetCardsLearnedCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatServiceServer is the server API for StatService service.
// All implementations must embed UnimplementedStatServiceServer
// for forward compatibility.
type StatServiceServer interface {
	GetAverageGrade(context.Context, *GetAverageGradeRequest) (*GetAverageGradeResponse, error)
	GetCardsReviewedCount(context.Context, *GetCardsReviewedCountRequest) (*GetCardsReviewedCountResponse, error)
	GetCardsLearnedCount(context.Context, *GetCardsLearnedCountRequest) (*GetCardsLearnedCountResponse, error)
	mustEmbedUnimplementedStatServiceServer()
}

// UnimplementedStatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatServiceServer struct{}

func (UnimplementedStatServiceServer) GetAverageGrade(context.Context, *GetAverageGradeRequest) (*GetAverageGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAverageGrade not implemented")
}
func (UnimplementedStatServiceServer) GetCardsReviewedCount(context.Context, *GetCardsReviewedCountRequest) (*GetCardsReviewedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsReviewedCount not implemented")
}
func (UnimplementedStatServiceServer) GetCardsLearnedCount(context.Context, *GetCardsLearnedCountRequest) (*GetCardsLearnedCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsLearnedCount not implemented")
}
func (UnimplementedStatServiceServer) mustEmbedUnimplementedStatServiceServer() {}
func (UnimplementedStatServiceServer) testEmbeddedByValue()                     {}

// UnsafeStatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatServiceServer will
// result in compilation errors.
type UnsafeStatServiceServer interface {
	mustEmbedUnimplementedStatServiceServer()
}

func RegisterStatServiceServer(s grpc.ServiceRegistrar, srv StatServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatService_ServiceDesc, srv)
}

func _StatService_GetAverageGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAverageGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetAverageGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetAverageGrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetAverageGrade(ctx, req.(*GetAverageGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetCardsReviewedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsReviewedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetCardsReviewedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetCardsReviewedCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetCardsReviewedCount(ctx, req.(*GetCardsReviewedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatService_GetCardsLearnedCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsLearnedCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatServiceServer).GetCardsLearnedCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatService_GetCardsLearnedCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatServiceServer).GetCardsLearnedCount(ctx, req.(*GetCardsLearnedCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatService_ServiceDesc is the grpc.ServiceDesc for StatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stats.StatService",
	HandlerType: (*StatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAverageGrade",
			Handler:    _StatService_GetAverageGrade_Handler,
		},
		{
			MethodName: "GetCardsReviewedCount",
			Handler:    _StatService_GetCardsReviewedCount_Handler,
		},
		{
			MethodName: "GetCardsLearnedCount",
			Handler:    _StatService_GetCardsLearnedCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats/stats.proto",
}
