// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: deck/deck.proto

package deckv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeckService_AddDeck_FullMethodName               = "/deck.DeckService/AddDeck"
	DeckService_ReadAllDecks_FullMethodName          = "/deck.DeckService/ReadAllDecks"
	DeckService_ReadDeck_FullMethodName              = "/deck.DeckService/ReadDeck"
	DeckService_SearchAllPublicDecks_FullMethodName  = "/deck.DeckService/SearchAllPublicDecks"
	DeckService_SearchUserPublicDecks_FullMethodName = "/deck.DeckService/SearchUserPublicDecks"
	DeckService_DeleteDeck_FullMethodName            = "/deck.DeckService/DeleteDeck"
	DeckService_AddCardToDeck_FullMethodName         = "/deck.DeckService/AddCardToDeck"
	DeckService_ReadCardsFromDeck_FullMethodName     = "/deck.DeckService/ReadCardsFromDeck"
)

// DeckServiceClient is the client API for DeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeckServiceClient interface {
	AddDeck(ctx context.Context, in *AddDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error)
	ReadAllDecks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeckListResponse, error)
	ReadDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error)
	SearchAllPublicDecks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchAllPublicDecksResponse, error)
	SearchUserPublicDecks(ctx context.Context, in *SearchUserPublicDecksRequest, opts ...grpc.CallOption) (*SearchUserPublicDecksResponse, error)
	DeleteDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCardToDeck(ctx context.Context, in *AddCardToDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadCardsFromDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*CardListResponse, error)
}

type deckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeckServiceClient(cc grpc.ClientConnInterface) DeckServiceClient {
	return &deckServiceClient{cc}
}

func (c *deckServiceClient) AddDeck(ctx context.Context, in *AddDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeckResponse)
	err := c.cc.Invoke(ctx, DeckService_AddDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ReadAllDecks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeckListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeckListResponse)
	err := c.cc.Invoke(ctx, DeckService_ReadAllDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ReadDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*DeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeckResponse)
	err := c.cc.Invoke(ctx, DeckService_ReadDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SearchAllPublicDecks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SearchAllPublicDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchAllPublicDecksResponse)
	err := c.cc.Invoke(ctx, DeckService_SearchAllPublicDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) SearchUserPublicDecks(ctx context.Context, in *SearchUserPublicDecksRequest, opts ...grpc.CallOption) (*SearchUserPublicDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchUserPublicDecksResponse)
	err := c.cc.Invoke(ctx, DeckService_SearchUserPublicDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) DeleteDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeckService_DeleteDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) AddCardToDeck(ctx context.Context, in *AddCardToDeckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DeckService_AddCardToDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deckServiceClient) ReadCardsFromDeck(ctx context.Context, in *ReadDeckRequest, opts ...grpc.CallOption) (*CardListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardListResponse)
	err := c.cc.Invoke(ctx, DeckService_ReadCardsFromDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeckServiceServer is the server API for DeckService service.
// All implementations must embed UnimplementedDeckServiceServer
// for forward compatibility.
type DeckServiceServer interface {
	AddDeck(context.Context, *AddDeckRequest) (*DeckResponse, error)
	ReadAllDecks(context.Context, *emptypb.Empty) (*DeckListResponse, error)
	ReadDeck(context.Context, *ReadDeckRequest) (*DeckResponse, error)
	SearchAllPublicDecks(context.Context, *emptypb.Empty) (*SearchAllPublicDecksResponse, error)
	SearchUserPublicDecks(context.Context, *SearchUserPublicDecksRequest) (*SearchUserPublicDecksResponse, error)
	DeleteDeck(context.Context, *ReadDeckRequest) (*emptypb.Empty, error)
	AddCardToDeck(context.Context, *AddCardToDeckRequest) (*emptypb.Empty, error)
	ReadCardsFromDeck(context.Context, *ReadDeckRequest) (*CardListResponse, error)
	mustEmbedUnimplementedDeckServiceServer()
}

// UnimplementedDeckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeckServiceServer struct{}

func (UnimplementedDeckServiceServer) AddDeck(context.Context, *AddDeckRequest) (*DeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeck not implemented")
}
func (UnimplementedDeckServiceServer) ReadAllDecks(context.Context, *emptypb.Empty) (*DeckListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllDecks not implemented")
}
func (UnimplementedDeckServiceServer) ReadDeck(context.Context, *ReadDeckRequest) (*DeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDeck not implemented")
}
func (UnimplementedDeckServiceServer) SearchAllPublicDecks(context.Context, *emptypb.Empty) (*SearchAllPublicDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAllPublicDecks not implemented")
}
func (UnimplementedDeckServiceServer) SearchUserPublicDecks(context.Context, *SearchUserPublicDecksRequest) (*SearchUserPublicDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserPublicDecks not implemented")
}
func (UnimplementedDeckServiceServer) DeleteDeck(context.Context, *ReadDeckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeck not implemented")
}
func (UnimplementedDeckServiceServer) AddCardToDeck(context.Context, *AddCardToDeckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardToDeck not implemented")
}
func (UnimplementedDeckServiceServer) ReadCardsFromDeck(context.Context, *ReadDeckRequest) (*CardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCardsFromDeck not implemented")
}
func (UnimplementedDeckServiceServer) mustEmbedUnimplementedDeckServiceServer() {}
func (UnimplementedDeckServiceServer) testEmbeddedByValue()                     {}

// UnsafeDeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeckServiceServer will
// result in compilation errors.
type UnsafeDeckServiceServer interface {
	mustEmbedUnimplementedDeckServiceServer()
}

func RegisterDeckServiceServer(s grpc.ServiceRegistrar, srv DeckServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeckService_ServiceDesc, srv)
}

func _DeckService_AddDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).AddDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_AddDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).AddDeck(ctx, req.(*AddDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ReadAllDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ReadAllDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_ReadAllDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ReadAllDecks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ReadDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ReadDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_ReadDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ReadDeck(ctx, req.(*ReadDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SearchAllPublicDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SearchAllPublicDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SearchAllPublicDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SearchAllPublicDecks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_SearchUserPublicDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserPublicDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).SearchUserPublicDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_SearchUserPublicDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).SearchUserPublicDecks(ctx, req.(*SearchUserPublicDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_DeleteDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).DeleteDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_DeleteDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).DeleteDeck(ctx, req.(*ReadDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_AddCardToDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardToDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).AddCardToDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_AddCardToDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).AddCardToDeck(ctx, req.(*AddCardToDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeckService_ReadCardsFromDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeckServiceServer).ReadCardsFromDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeckService_ReadCardsFromDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeckServiceServer).ReadCardsFromDeck(ctx, req.(*ReadDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeckService_ServiceDesc is the grpc.ServiceDesc for DeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deck.DeckService",
	HandlerType: (*DeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeck",
			Handler:    _DeckService_AddDeck_Handler,
		},
		{
			MethodName: "ReadAllDecks",
			Handler:    _DeckService_ReadAllDecks_Handler,
		},
		{
			MethodName: "ReadDeck",
			Handler:    _DeckService_ReadDeck_Handler,
		},
		{
			MethodName: "SearchAllPublicDecks",
			Handler:    _DeckService_SearchAllPublicDecks_Handler,
		},
		{
			MethodName: "SearchUserPublicDecks",
			Handler:    _DeckService_SearchUserPublicDecks_Handler,
		},
		{
			MethodName: "DeleteDeck",
			Handler:    _DeckService_DeleteDeck_Handler,
		},
		{
			MethodName: "AddCardToDeck",
			Handler:    _DeckService_AddCardToDeck_Handler,
		},
		{
			MethodName: "ReadCardsFromDeck",
			Handler:    _DeckService_ReadCardsFromDeck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deck/deck.proto",
}
