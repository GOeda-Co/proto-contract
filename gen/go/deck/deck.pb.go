// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: deck/deck.proto

package deckv1

import (
	card "github.com/GOeda-Co/proto-contract/gen/go/card"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddDeckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddDeckRequest) Reset() {
	*x = AddDeckRequest{}
	mi := &file_deck_deck_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeckRequest) ProtoMessage() {}

func (x *AddDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeckRequest.ProtoReflect.Descriptor instead.
func (*AddDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{0}
}

func (x *AddDeckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddDeckRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type ReadDeckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeckId        string                 `protobuf:"bytes,1,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadDeckRequest) Reset() {
	*x = ReadDeckRequest{}
	mi := &file_deck_deck_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadDeckRequest) ProtoMessage() {}

func (x *ReadDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadDeckRequest.ProtoReflect.Descriptor instead.
func (*ReadDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{1}
}

func (x *ReadDeckRequest) GetDeckId() string {
	if x != nil {
		return x.DeckId
	}
	return ""
}

type SearchAllPublicDecksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Decks         []*Deck                `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchAllPublicDecksResponse) Reset() {
	*x = SearchAllPublicDecksResponse{}
	mi := &file_deck_deck_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchAllPublicDecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchAllPublicDecksResponse) ProtoMessage() {}

func (x *SearchAllPublicDecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchAllPublicDecksResponse.ProtoReflect.Descriptor instead.
func (*SearchAllPublicDecksResponse) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{2}
}

func (x *SearchAllPublicDecksResponse) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type SearchUserPublicDecksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserPublicDecksRequest) Reset() {
	*x = SearchUserPublicDecksRequest{}
	mi := &file_deck_deck_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserPublicDecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserPublicDecksRequest) ProtoMessage() {}

func (x *SearchUserPublicDecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserPublicDecksRequest.ProtoReflect.Descriptor instead.
func (*SearchUserPublicDecksRequest) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{3}
}

func (x *SearchUserPublicDecksRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SearchUserPublicDecksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Decks         []*Deck                `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchUserPublicDecksResponse) Reset() {
	*x = SearchUserPublicDecksResponse{}
	mi := &file_deck_deck_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchUserPublicDecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserPublicDecksResponse) ProtoMessage() {}

func (x *SearchUserPublicDecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserPublicDecksResponse.ProtoReflect.Descriptor instead.
func (*SearchUserPublicDecksResponse) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{4}
}

func (x *SearchUserPublicDecksResponse) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type AddCardToDeckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CardId        string                 `protobuf:"bytes,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	DeckId        string                 `protobuf:"bytes,2,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCardToDeckRequest) Reset() {
	*x = AddCardToDeckRequest{}
	mi := &file_deck_deck_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCardToDeckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCardToDeckRequest) ProtoMessage() {}

func (x *AddCardToDeckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCardToDeckRequest.ProtoReflect.Descriptor instead.
func (*AddCardToDeckRequest) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{5}
}

func (x *AddCardToDeckRequest) GetCardId() string {
	if x != nil {
		return x.CardId
	}
	return ""
}

func (x *AddCardToDeckRequest) GetDeckId() string {
	if x != nil {
		return x.DeckId
	}
	return ""
}

type DeckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deck          *Deck                  `protobuf:"bytes,1,opt,name=deck,proto3" json:"deck,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckResponse) Reset() {
	*x = DeckResponse{}
	mi := &file_deck_deck_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckResponse) ProtoMessage() {}

func (x *DeckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckResponse.ProtoReflect.Descriptor instead.
func (*DeckResponse) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{6}
}

func (x *DeckResponse) GetDeck() *Deck {
	if x != nil {
		return x.Deck
	}
	return nil
}

type DeckListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Decks         []*Deck                `protobuf:"bytes,1,rep,name=decks,proto3" json:"decks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeckListResponse) Reset() {
	*x = DeckListResponse{}
	mi := &file_deck_deck_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeckListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeckListResponse) ProtoMessage() {}

func (x *DeckListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeckListResponse.ProtoReflect.Descriptor instead.
func (*DeckListResponse) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{7}
}

func (x *DeckListResponse) GetDecks() []*Deck {
	if x != nil {
		return x.Decks
	}
	return nil
}

type CardListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cards         []*card.Card           `protobuf:"bytes,1,rep,name=cards,proto3" json:"cards,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CardListResponse) Reset() {
	*x = CardListResponse{}
	mi := &file_deck_deck_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CardListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardListResponse) ProtoMessage() {}

func (x *CardListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardListResponse.ProtoReflect.Descriptor instead.
func (*CardListResponse) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{8}
}

func (x *CardListResponse) GetCards() []*card.Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

type Deck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeckId        string                 `protobuf:"bytes,1,opt,name=deck_id,json=deckId,proto3" json:"deck_id,omitempty"`
	CreatedBy     string                 `protobuf:"bytes,2,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Cards         []*card.Card           `protobuf:"bytes,6,rep,name=cards,proto3" json:"cards,omitempty"`
	CardsQuantity uint32                 `protobuf:"varint,7,opt,name=cards_quantity,json=cardsQuantity,proto3" json:"cards_quantity,omitempty"`
	IsPublic      bool                   `protobuf:"varint,8,opt,name=is_public,json=isPublic,proto3" json:"is_public,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deck) Reset() {
	*x = Deck{}
	mi := &file_deck_deck_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_deck_deck_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_deck_deck_proto_rawDescGZIP(), []int{9}
}

func (x *Deck) GetDeckId() string {
	if x != nil {
		return x.DeckId
	}
	return ""
}

func (x *Deck) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *Deck) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Deck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deck) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Deck) GetCards() []*card.Card {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *Deck) GetCardsQuantity() uint32 {
	if x != nil {
		return x.CardsQuantity
	}
	return 0
}

func (x *Deck) GetIsPublic() bool {
	if x != nil {
		return x.IsPublic
	}
	return false
}

var File_deck_deck_proto protoreflect.FileDescriptor

const file_deck_deck_proto_rawDesc = "" +
	"\n" +
	"\x0fdeck/deck.proto\x12\x04deck\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x0fcard/card.proto\"F\n" +
	"\x0eAddDeckRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\"*\n" +
	"\x0fReadDeckRequest\x12\x17\n" +
	"\adeck_id\x18\x01 \x01(\tR\x06deckId\"@\n" +
	"\x1cSearchAllPublicDecksResponse\x12 \n" +
	"\x05decks\x18\x01 \x03(\v2\n" +
	".deck.DeckR\x05decks\"7\n" +
	"\x1cSearchUserPublicDecksRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"A\n" +
	"\x1dSearchUserPublicDecksResponse\x12 \n" +
	"\x05decks\x18\x01 \x03(\v2\n" +
	".deck.DeckR\x05decks\"H\n" +
	"\x14AddCardToDeckRequest\x12\x17\n" +
	"\acard_id\x18\x01 \x01(\tR\x06cardId\x12\x17\n" +
	"\adeck_id\x18\x02 \x01(\tR\x06deckId\".\n" +
	"\fDeckResponse\x12\x1e\n" +
	"\x04deck\x18\x01 \x01(\v2\n" +
	".deck.DeckR\x04deck\"4\n" +
	"\x10DeckListResponse\x12 \n" +
	"\x05decks\x18\x01 \x03(\v2\n" +
	".deck.DeckR\x05decks\"4\n" +
	"\x10CardListResponse\x12 \n" +
	"\x05cards\x18\x01 \x03(\v2\n" +
	".card.CardR\x05cards\"\x95\x02\n" +
	"\x04Deck\x12\x17\n" +
	"\adeck_id\x18\x01 \x01(\tR\x06deckId\x12\x1d\n" +
	"\n" +
	"created_by\x18\x02 \x01(\tR\tcreatedBy\x129\n" +
	"\n" +
	"created_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12 \n" +
	"\x05cards\x18\x06 \x03(\v2\n" +
	".card.CardR\x05cards\x12%\n" +
	"\x0ecards_quantity\x18\a \x01(\rR\rcardsQuantity\x12\x1b\n" +
	"\tis_public\x18\b \x01(\bR\bisPublic2\xb5\x04\n" +
	"\vDeckService\x123\n" +
	"\aAddDeck\x12\x14.deck.AddDeckRequest\x1a\x12.deck.DeckResponse\x12>\n" +
	"\fReadAllDecks\x12\x16.google.protobuf.Empty\x1a\x16.deck.DeckListResponse\x125\n" +
	"\bReadDeck\x12\x15.deck.ReadDeckRequest\x1a\x12.deck.DeckResponse\x12R\n" +
	"\x14SearchAllPublicDecks\x12\x16.google.protobuf.Empty\x1a\".deck.SearchAllPublicDecksResponse\x12`\n" +
	"\x15SearchUserPublicDecks\x12\".deck.SearchUserPublicDecksRequest\x1a#.deck.SearchUserPublicDecksResponse\x12;\n" +
	"\n" +
	"DeleteDeck\x12\x15.deck.ReadDeckRequest\x1a\x16.google.protobuf.Empty\x12C\n" +
	"\rAddCardToDeck\x12\x1a.deck.AddCardToDeckRequest\x1a\x16.google.protobuf.Empty\x12B\n" +
	"\x11ReadCardsFromDeck\x12\x15.deck.ReadDeckRequest\x1a\x16.deck.CardListResponseB7Z5github.com/GOeda-Co/proto-contract/gen/go/deck;deckv1b\x06proto3"

var (
	file_deck_deck_proto_rawDescOnce sync.Once
	file_deck_deck_proto_rawDescData []byte
)

func file_deck_deck_proto_rawDescGZIP() []byte {
	file_deck_deck_proto_rawDescOnce.Do(func() {
		file_deck_deck_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_deck_deck_proto_rawDesc), len(file_deck_deck_proto_rawDesc)))
	})
	return file_deck_deck_proto_rawDescData
}

var file_deck_deck_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_deck_deck_proto_goTypes = []any{
	(*AddDeckRequest)(nil),                // 0: deck.AddDeckRequest
	(*ReadDeckRequest)(nil),               // 1: deck.ReadDeckRequest
	(*SearchAllPublicDecksResponse)(nil),  // 2: deck.SearchAllPublicDecksResponse
	(*SearchUserPublicDecksRequest)(nil),  // 3: deck.SearchUserPublicDecksRequest
	(*SearchUserPublicDecksResponse)(nil), // 4: deck.SearchUserPublicDecksResponse
	(*AddCardToDeckRequest)(nil),          // 5: deck.AddCardToDeckRequest
	(*DeckResponse)(nil),                  // 6: deck.DeckResponse
	(*DeckListResponse)(nil),              // 7: deck.DeckListResponse
	(*CardListResponse)(nil),              // 8: deck.CardListResponse
	(*Deck)(nil),                          // 9: deck.Deck
	(*card.Card)(nil),                     // 10: card.Card
	(*timestamppb.Timestamp)(nil),         // 11: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                 // 12: google.protobuf.Empty
}
var file_deck_deck_proto_depIdxs = []int32{
	9,  // 0: deck.SearchAllPublicDecksResponse.decks:type_name -> deck.Deck
	9,  // 1: deck.SearchUserPublicDecksResponse.decks:type_name -> deck.Deck
	9,  // 2: deck.DeckResponse.deck:type_name -> deck.Deck
	9,  // 3: deck.DeckListResponse.decks:type_name -> deck.Deck
	10, // 4: deck.CardListResponse.cards:type_name -> card.Card
	11, // 5: deck.Deck.created_at:type_name -> google.protobuf.Timestamp
	10, // 6: deck.Deck.cards:type_name -> card.Card
	0,  // 7: deck.DeckService.AddDeck:input_type -> deck.AddDeckRequest
	12, // 8: deck.DeckService.ReadAllDecks:input_type -> google.protobuf.Empty
	1,  // 9: deck.DeckService.ReadDeck:input_type -> deck.ReadDeckRequest
	12, // 10: deck.DeckService.SearchAllPublicDecks:input_type -> google.protobuf.Empty
	3,  // 11: deck.DeckService.SearchUserPublicDecks:input_type -> deck.SearchUserPublicDecksRequest
	1,  // 12: deck.DeckService.DeleteDeck:input_type -> deck.ReadDeckRequest
	5,  // 13: deck.DeckService.AddCardToDeck:input_type -> deck.AddCardToDeckRequest
	1,  // 14: deck.DeckService.ReadCardsFromDeck:input_type -> deck.ReadDeckRequest
	6,  // 15: deck.DeckService.AddDeck:output_type -> deck.DeckResponse
	7,  // 16: deck.DeckService.ReadAllDecks:output_type -> deck.DeckListResponse
	6,  // 17: deck.DeckService.ReadDeck:output_type -> deck.DeckResponse
	2,  // 18: deck.DeckService.SearchAllPublicDecks:output_type -> deck.SearchAllPublicDecksResponse
	4,  // 19: deck.DeckService.SearchUserPublicDecks:output_type -> deck.SearchUserPublicDecksResponse
	12, // 20: deck.DeckService.DeleteDeck:output_type -> google.protobuf.Empty
	12, // 21: deck.DeckService.AddCardToDeck:output_type -> google.protobuf.Empty
	8,  // 22: deck.DeckService.ReadCardsFromDeck:output_type -> deck.CardListResponse
	15, // [15:23] is the sub-list for method output_type
	7,  // [7:15] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_deck_deck_proto_init() }
func file_deck_deck_proto_init() {
	if File_deck_deck_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_deck_deck_proto_rawDesc), len(file_deck_deck_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deck_deck_proto_goTypes,
		DependencyIndexes: file_deck_deck_proto_depIdxs,
		MessageInfos:      file_deck_deck_proto_msgTypes,
	}.Build()
	File_deck_deck_proto = out.File
	file_deck_deck_proto_goTypes = nil
	file_deck_deck_proto_depIdxs = nil
}
